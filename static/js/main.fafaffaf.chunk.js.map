{"version":3,"sources":["audio/alarm.mp3","components/AlarmSetting.js","components/Speaker.js","components/Alarm.js","components/Alert.js","components/TimerApp.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AlarmSettings","_ref","change","mins","secs","click","reset","react_default","a","createElement","className","htmlFor","type","name","min","max","value","onChange","e","id","onClick","Speaker","sound","soundOn","style","animation","concat","src","loop","autoPlay","Alarm","Fragment","Alert","TimerApp","state","seconds","minutes","alarmMins","alarmSecs","alarmSet","alarmCounterMins","alarmCounterSecs","alarmSetAlert","handleTimer","action","_this","counter","setInterval","setState","clearInterval","handleAlarmSetting","target","handleAlarm","preventDefault","alarmTime","setTimeout","stopAlarm","resetAlarmCounter","handleAlertRemove","this","_this2","AlarmSetting","components_Speaker","components_Alarm","components_Alert","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_TimerApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fafaffaf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alarm.87dc6e28.mp3\";","import React from \"react\";\r\nimport \"./../styles/alarm.sass\";\r\n\r\nconst AlarmSettings = ({ change, mins, secs, click, reset }) => {\r\n  return (\r\n    <form className=\"form\">\r\n      <label htmlFor=\"min\">min:</label>\r\n      <input\r\n        type=\"number\"\r\n        name=\"quantity\"\r\n        min=\"0\"\r\n        max=\"59\"\r\n        value={mins}\r\n        onChange={e => change(e, \"min\")}\r\n        id=\"min\"\r\n      />\r\n      <label htmlFor=\"sec\">sec:</label>\r\n      <input\r\n        type=\"number\"\r\n        name=\"quantity\"\r\n        min=\"0\"\r\n        max=\"59\"\r\n        value={secs}\r\n        onChange={e => change(e, \"sec\")}\r\n        id=\"sec\"\r\n      />\r\n      <button type=\"submit\" onClick={click}>\r\n        Set Alarm\r\n      </button>\r\n      <button onClick={reset}>reset</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AlarmSettings;\r\n","import React from \"react\";\r\nimport \"../styles/speaker.sass\";\r\n\r\nconst Speaker = ({ sound, click, soundOn }) => {\r\n  return (\r\n    <div className=\"speaker\">\r\n      <i\r\n        className=\"fas fa-volume-down\"\r\n        style={{\r\n          animation: `${soundOn ? \"shake .5s linear infinite\" : \"none\"}`\r\n        }}\r\n      />\r\n      <button\r\n        onClick={click}\r\n        style={{\r\n          animation: `${soundOn ? \"shadow .5s linear infinite\" : \"none\"}`\r\n        }}\r\n      >\r\n        <span />\r\n        <span />\r\n      </button>\r\n      {soundOn && <audio src={sound} loop autoPlay />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Speaker;\r\n","import React from \"react\";\r\nimport \"../styles/alarm.sass\";\r\n\r\nconst Alarm = ({ mins, secs, soundOn }) => {\r\n  return (\r\n    <>\r\n      {soundOn ? (\r\n        <h1\r\n          className=\"counter\"\r\n          style={{\r\n            animation: `${soundOn ? \"blink .5s infinite\" : \"none\"}`\r\n          }}\r\n        >\r\n          ALERT!\r\n        </h1>\r\n      ) : (\r\n        <h1 className=\"counter\">\r\n          {mins < 10 ? \"0\" + mins : mins} : {secs < 10 ? \"0\" + secs : secs}\r\n        </h1>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Alarm;\r\n","import React from \"react\";\r\nimport \"../styles/alarm.sass\";\r\n\r\nconst Alert = ({ click }) => {\r\n  return (\r\n    <div className=\"alert\">\r\n      <h1>Alarm already set</h1>\r\n      <p>Press RESET button to set new one.</p>\r\n      <button onClick={click}>ok</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import React, { Component } from \"react\";\nimport \"./../styles/timer.sass\";\nimport AlarmSetting from \"./AlarmSetting\";\nimport Speaker from \"./Speaker\";\nimport sound from \"../audio/alarm.mp3\";\nimport Alarm from \"./Alarm\";\nimport Alert from \"./Alert\";\n\nclass TimerApp extends Component {\n  state = {\n    seconds: 0,\n    minutes: 0,\n    alarmMins: 0,\n    alarmSecs: 0,\n    soundOn: false,\n    alarmSet: false,\n    alarmCounterMins: 0,\n    alarmCounterSecs: 0,\n    alarmSetAlert: false\n  };\n\n  componentDidUpdate() {\n    if (this.state.seconds >= 60) {\n      this.setState({\n        seconds: 0,\n        minutes: this.state.minutes + 1\n      });\n    }\n  }\n\n  handleTimer = action => {\n    if (action === \"start\") {\n      this.counter = setInterval(() => {\n        this.setState({\n          seconds: this.state.seconds + 1\n        });\n      }, 1000);\n    } else if (action === \"stop\") {\n      clearInterval(this.counter);\n    } else {\n      clearInterval(this.counter);\n      this.setState({\n        seconds: 0,\n        minutes: 0\n      });\n    }\n  };\n\n  handleAlarmSetting = (e, type) => {\n    if (type === \"min\") {\n      this.setState({\n        alarmMins: e.target.value\n      });\n    } else {\n      this.setState({\n        alarmSecs: e.target.value\n      });\n    }\n  };\n\n  handleAlarm = e => {\n    e.preventDefault();\n\n    if (this.state.alarmSet) {\n      this.setState({\n        alarmSetAlert: true\n      });\n      return;\n    }\n\n    const alarmTime =\n      this.state.alarmMins * 60000 + this.state.alarmSecs * 1000;\n    this.setState({\n      alarmCounterMins: this.state.alarmMins,\n      alarmCounterSecs: this.state.alarmSecs,\n      alarmMins: 0,\n      alarmSecs: 0,\n      alarmSet: true\n    });\n    const counter = setInterval(() => {\n      if (this.state.alarmCounterSecs > 0) {\n        this.setState({\n          alarmCounterSecs: this.state.alarmCounterSecs - 1\n        });\n      } else if (\n        this.state.alarmCounterSecs === 0 &&\n        this.state.alarmCounterMins !== 0\n      ) {\n        this.setState({\n          alarmCounterSecs: 59,\n          alarmCounterMins: this.state.alarmCounterMins - 1\n        });\n      } else {\n        this.setState({\n          alarmCounterSecs: 0,\n          alarmCounterMins: 0\n        });\n        clearInterval(counter);\n      }\n    }, 1000);\n    setTimeout(() => {\n      this.setState({ soundOn: true });\n    }, alarmTime);\n  };\n\n  stopAlarm = () => {\n    if (this.state.soundOn) {\n      this.setState({\n        soundOn: false,\n        alarmSet: false\n      });\n    }\n  };\n\n  resetAlarmCounter = e => {\n    e.preventDefault();\n    this.setState({\n      alarmMins: 0,\n      alarmSecs: 0,\n      soundOn: false,\n      alarmSet: false,\n      alarmCounterMins: 0,\n      alarmCounterSecs: 0\n    });\n  };\n\n  handleAlertRemove = () => {\n    this.setState({\n      alarmSetAlert: false\n    });\n  };\n  render() {\n    return (\n      <>\n        <div className=\"container\">\n          <h1>\n            0{this.state.minutes} :{\" \"}\n            {this.state.seconds >= 10\n              ? this.state.seconds\n              : \"0\" + this.state.seconds}\n          </h1>\n          <button onClick={() => this.handleTimer(\"start\")}>start</button>\n          <button onClick={() => this.handleTimer(\"stop\")}>stop</button>\n          <button onClick={() => this.handleTimer(\"reset\")}>reset</button>\n        </div>\n        <AlarmSetting\n          change={this.handleAlarmSetting}\n          secs={this.state.alarmSecs}\n          mins={this.state.alarmMins}\n          click={this.handleAlarm}\n          reset={this.resetAlarmCounter}\n        />\n        <Speaker\n          sound={sound}\n          click={this.stopAlarm}\n          soundOn={this.state.soundOn}\n        />\n        {this.state.alarmSet && (\n          <Alarm\n            mins={this.state.alarmCounterMins}\n            secs={this.state.alarmCounterSecs}\n            soundOn={this.state.soundOn}\n          />\n        )}\n        {this.state.alarmSetAlert && <Alert click={this.handleAlertRemove} />}\n      </>\n    );\n  }\n}\n\nexport default TimerApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.sass\";\nimport TimerApp from \"./components/TimerApp\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<TimerApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}