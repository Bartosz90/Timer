{"version":3,"sources":["audio/alarm.mp3","components/AlarmSetting.js","components/Speaker.js","components/TimerApp.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AlarmSettings","_ref","change","mins","secs","click","react_default","a","createElement","className","onSubmit","type","name","min","max","value","onChange","e","onClick","Speaker","sound","play","src","loop","autoPlay","TimerApp","state","seconds","minutes","alarmMins","alarmSecs","alarm","handleTimer","action","_this","counter","setInterval","setState","clearInterval","handleAlarmSetting","target","handleAlarm","preventDefault","console","log","playAlarm","this","_this2","Fragment","AlarmSetting","components_Speaker","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_TimerApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sQC6BzBC,eA1BO,SAAAC,GAAmC,IAAhCC,EAAgCD,EAAhCC,OAAQC,EAAwBF,EAAxBE,KAAMC,EAAkBH,EAAlBG,KAAMC,EAAYJ,EAAZI,MAC3C,OACEC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOC,SAAUL,GAC/BC,EAAAC,EAAAC,cAAA,SACEG,KAAK,SACLC,KAAK,WACLC,IAAI,IACJC,IAAI,KACJC,MAAOZ,EACPa,SAAU,SAAAC,GAAC,OAAIf,EAAOe,EAAG,UAE3BX,EAAAC,EAAAC,cAAA,SACEG,KAAK,SACLC,KAAK,WACLC,IAAI,IACJC,IAAI,KACJC,MAAOX,EACPY,SAAU,SAAAC,GAAC,OAAIf,EAAOe,EAAG,UAE3BX,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASO,QAASb,GAA/B,gBCNSc,SAbC,SAAAlB,GAA4B,IAAzBmB,EAAyBnB,EAAzBmB,MAAOf,EAAkBJ,EAAlBI,MAAOgB,EAAWpB,EAAXoB,KAC/B,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,SAAOc,IAAKF,EAAOG,KAAMF,EAAMG,SAAUH,IACzCf,EAAAC,EAAAC,cAAA,UAAQU,QAASb,GACfC,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,iCCiFOiB,6MApFbC,MAAQ,CACNC,QAAS,EACTC,QAAS,EACTC,UAAW,EACXC,UAAW,EACXC,OAAO,KAYTC,YAAc,SAAAC,GACG,UAAXA,EACFC,EAAKC,QAAUC,YAAY,WACzBF,EAAKG,SAAS,CACZV,QAASO,EAAKR,MAAMC,QAAU,KAE/B,KACiB,SAAXM,EACTK,cAAcJ,EAAKC,UAEnBG,cAAcJ,EAAKC,SACnBD,EAAKG,SAAS,CACZV,QAAS,EACTC,QAAS,QAKfW,mBAAqB,SAACtB,EAAGN,GACV,QAATA,EACFuB,EAAKG,SAAS,CACZR,UAAWZ,EAAEuB,OAAOzB,QAGtBmB,EAAKG,SAAS,CACZP,UAAWb,EAAEuB,OAAOzB,WAK1B0B,YAAc,SAAAxB,GACZA,EAAEyB,iBACFC,QAAQC,IAAI,WAGdC,UAAY,WACVX,EAAKG,SAAS,CACZN,OAAQG,EAAKR,MAAMK,6FA7CjBe,KAAKpB,MAAMC,SAAW,IACxBmB,KAAKT,SAAS,CACZV,QAAS,EACTC,QAASkB,KAAKpB,MAAME,QAAU,qCA8C3B,IAAAmB,EAAAD,KACP,OACExC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyC,SAAA,KACE1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,cACIsC,KAAKpB,MAAME,QADf,KAC0B,IACvBkB,KAAKpB,MAAMC,SAAW,GACnBmB,KAAKpB,MAAMC,QACX,IAAMmB,KAAKpB,MAAMC,SAEvBrB,EAAAC,EAAAC,cAAA,UAAQU,QAAS,kBAAM6B,EAAKf,YAAY,WAAxC,SACA1B,EAAAC,EAAAC,cAAA,UAAQU,QAAS,kBAAM6B,EAAKf,YAAY,UAAxC,QACA1B,EAAAC,EAAAC,cAAA,UAAQU,QAAS,kBAAM6B,EAAKf,YAAY,WAAxC,UAEF1B,EAAAC,EAAAC,cAACyC,EAAD,CACE/C,OAAQ4C,KAAKP,mBACbnC,KAAM0C,KAAKpB,MAAMI,UACjB3B,KAAM2C,KAAKpB,MAAMG,UACjBxB,MAAOyC,KAAKL,cAEdnC,EAAAC,EAAAC,cAAC0C,EAAD,CAAS9B,MAAOA,IAAOf,MAAOyC,KAAKD,UAAWxB,KAAMyB,KAAKpB,MAAMK,gBA/EhDoB,aCMHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAAcC,SAASC,eAAe,SD2HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a53b479b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alarm.87dc6e28.mp3\";","import React from \"react\";\r\nimport \"./../styles/alarm.sass\";\r\n\r\nconst AlarmSettings = ({ change, mins, secs, click }) => {\r\n  return (\r\n    <form className=\"form\" onSubmit={click}>\r\n      <input\r\n        type=\"number\"\r\n        name=\"quantity\"\r\n        min=\"0\"\r\n        max=\"59\"\r\n        value={mins}\r\n        onChange={e => change(e, \"min\")}\r\n      />\r\n      <input\r\n        type=\"number\"\r\n        name=\"quantity\"\r\n        min=\"0\"\r\n        max=\"59\"\r\n        value={secs}\r\n        onChange={e => change(e, \"sec\")}\r\n      />\r\n      <button type=\"submit\" onClick={click}>\r\n        Set Alarm\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AlarmSettings;\r\n","import React from \"react\";\r\nimport \"../styles/speaker.sass\";\r\n\r\nconst Speaker = ({ sound, click, play }) => {\r\n  return (\r\n    <div className=\"speaker\">\r\n      <i className=\"fas fa-volume-down\" />\r\n      <audio src={sound} loop={play} autoPlay={play} />\r\n      <button onClick={click}>\r\n        <span />\r\n        <span />\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Speaker;\r\n","import React, { Component } from \"react\";\nimport \"./../styles/timer.sass\";\nimport AlarmSetting from \"./AlarmSetting\";\nimport Speaker from \"./Speaker\";\nimport sound from \"../audio/alarm.mp3\";\n\nclass TimerApp extends Component {\n  state = {\n    seconds: 0,\n    minutes: 0,\n    alarmMins: 0,\n    alarmSecs: 0,\n    alarm: false\n  };\n\n  componentDidUpdate() {\n    if (this.state.seconds >= 60) {\n      this.setState({\n        seconds: 0,\n        minutes: this.state.minutes + 1\n      });\n    }\n  }\n\n  handleTimer = action => {\n    if (action === \"start\") {\n      this.counter = setInterval(() => {\n        this.setState({\n          seconds: this.state.seconds + 1\n        });\n      }, 1000);\n    } else if (action === \"stop\") {\n      clearInterval(this.counter);\n    } else {\n      clearInterval(this.counter);\n      this.setState({\n        seconds: 0,\n        minutes: 0\n      });\n    }\n  };\n\n  handleAlarmSetting = (e, type) => {\n    if (type === \"min\") {\n      this.setState({\n        alarmMins: e.target.value\n      });\n    } else {\n      this.setState({\n        alarmSecs: e.target.value\n      });\n    }\n  };\n\n  handleAlarm = e => {\n    e.preventDefault();\n    console.log(\"klik\");\n  };\n\n  playAlarm = () => {\n    this.setState({\n      alarm: !this.state.alarm\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"container\">\n          <h1>\n            0{this.state.minutes} :{\" \"}\n            {this.state.seconds >= 10\n              ? this.state.seconds\n              : \"0\" + this.state.seconds}\n          </h1>\n          <button onClick={() => this.handleTimer(\"start\")}>start</button>\n          <button onClick={() => this.handleTimer(\"stop\")}>stop</button>\n          <button onClick={() => this.handleTimer(\"reset\")}>reset</button>\n        </div>\n        <AlarmSetting\n          change={this.handleAlarmSetting}\n          secs={this.state.alarmSecs}\n          mins={this.state.alarmMins}\n          click={this.handleAlarm}\n        />\n        <Speaker sound={sound} click={this.playAlarm} play={this.state.alarm} />\n      </>\n    );\n  }\n}\n\nexport default TimerApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.sass\";\nimport TimerApp from \"./components/TimerApp\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<TimerApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}